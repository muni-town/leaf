services:
  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio:/data

  pyroscope:
    image: grafana/pyroscope:latest
    ports:
      - "4040:4040"

  tempo-init:
    image: &tempoImage grafana/tempo:latest
    user: root
    # Tempo runs as user 10001, and docker compose creates the volume as root.
    # As such, we need to chown the volume in order for Tempo to start correctly.
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo-data:/var/tempo

  tempo:
    image: *tempoImage
    command: ["-config.file=/etc/tempo.yaml"]
    configs:
      - source: tempo-config
        target: /etc/tempo.yaml
    volumes:
      - tempo-data:/var/tempo
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
    depends_on:
      - tempo-init

  grafana:
    image: grafana/grafana:12.0.0
    configs:
      - source: grafana-datasources
        target: /etc/grafana/provisioning/datasources/datasources.yaml
    volumes:
      - ./gitignore/ca-certificates.crt:/usr/local/share/ca-certificates/cert.crt
      # - ./compose/grafana-pyroscope-app:/var/lib/grafana/plugins/grafana-pyroscope-app
    environment:
      - http_proxy
      - https_proxy
      - no_proxy=pyroscope,tempo
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      - GF_INSTALL_PLUGINS=grafana-pyroscope-app
    user: root
    entrypoint:
      - bash
      - -c
      - update-ca-certificates && exec bash /run.sh
    ports:
      - "3000:3000"

volumes:
  minio:
  tempo-data:

configs:
  grafana-datasources:
    content: |
      apiVersion: 1
      datasources:
        - name: Pyroscope
          uid: pyroscope
          type: grafana-pyroscope-datasource
          typeName: Pyroscope
          access: proxy
          url: http://pyroscope:4040
        - name: Tempo
          type: tempo
          access: proxy
          orgId: 1
          url: http://tempo:3200
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
          apiVersion: 1
          uid: tempo
          jsonData:
            {
              "tracesToProfiles":
                {
                  "datasourceUid": "pyroscope",
                  "profileTypeId": "process_cpu:cpu:nanoseconds:cpu:nanoseconds",
                },
            }

  tempo-config:
    content: |
      stream_over_http_enabled: true
      server:
        http_listen_port: 3200
        log_level: info

      query_frontend:
        search:
          duration_slo: 5s
          throughput_bytes_slo: 1.073741824e+09
          metadata_slo:
            duration_slo: 5s
            throughput_bytes_slo: 1.073741824e+09
        trace_by_id:
          duration_slo: 5s

      distributor:
        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: "tempo:4317"

      ingester:
        max_block_duration: 5m # cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally

      compactor:
        compaction:
          block_retention: 1h # overall Tempo trace retention. set for demo purposes

      metrics_generator:
        registry:
          external_labels:
            source: tempo
            cluster: docker-compose
        storage:
          path: /var/tempo/generator/wal
          remote_write:
            - url: http://prometheus:9090/api/v1/write
              send_exemplars: true
        traces_storage:
          path: /var/tempo/generator/traces

      storage:
        trace:
          backend: local # backend configuration to use
          wal:
            path: /var/tempo/wal # where to store the wal locally
          local:
            path: /var/tempo/blocks

      overrides:
        defaults:
          metrics_generator:
            processors: [service-graphs, span-metrics, local-blocks] # enables metrics generator
            generate_native_histograms: both
